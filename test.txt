#include <stdio.h> 
#include <ctype.h>
#include <inttypes.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

// NECESARA PENTRU FUNCTIA _delay_ms(10);
#include <util/delay.h>

// VARIABILA GLOBALA UTILIZATA PENTRU AJUSTAREA TENSIUNII DE IESIRE A CONVERTORULUI DAC
volatile unsigned int DAC_VALUE = 0;  // VOUT = (2 * VREF * [0..1023])/1024 
                                      // VREF IN CAZUL NOSTRU = 2.048V


// DEFINIREA RUTINELOR PENTRU COMUNICATIA SERIALA ASINCRONA
// 'uart1_putchar' -> TRANSMISIE DATE DE PE INTERFATA USART
// 'uart1_getchar' <- RECEPTIE DATE DE PE INTERFATA USART
static int uart1_putchar(char c);
static int uart1_getchar(void);

// DEFINIREA DESCRIPTORUL ATASAT FLUXURILOR STANDARD DE COMUNICATIE
// INTERCONECTAREA FLUXURILOR STANDARD DE COMUNICATIE LA RUTINELE 
// CARE IMPLEMENTEAZA / GESTIONEAZA COMUNICATIA SERIALA ASINCRONA 
// CELE TREI CONEXIUNI DE INTRARE / IESIRE (I / O) SE NUMESC:
//  - INTRARE STANDARD ( STDIN )
//  - IESIRE  STANDARD ( STDOUT ) 
//  - EROARE  STANDARD ( STDERR ) 
static FILE strm_uart1 = FDEV_SETUP_STREAM(uart1_putchar, uart1_getchar, _FDEV_SETUP_RW);



// BAUD RATE:4800 (BIT U2X=0, FOSC=1.00MHZ, REG.: UBRR1L, TABEL: 82)
// FORMULA DE CALCUL A BAUD RATE-LUI (TABEL: 74)
// DIMENSIUNE PACHET DATA: 8 BIT (TABEL: 80)
// COMUNICATIE SERIALA ASINCRONA: (REG.: UCSR1C  TABEL: 77)
// FARA PARITATE (REG.: UCSR1C  TABEL: 78)
// 1 BIT STOP: (REG.: UCSR1C  TABEL: 79)
// CONTROL TRASFER DATE: FARA CONTROL (SW/HW)
void uart1_init(void)
{
 UCSR1B = 0x00; //disable while setting baud rate
 UCSR1A = 0x00;
 UCSR1C = 0x06;
 UBRR1L = 0x0C; //set baud rate lo
 UBRR1H = 0x00; //set baud rate hi
 UCSR1B = 0x18;
}

// TRANSMISIA BYTE-LUI (CARACTER-LUI) PE SERIALA SE VA REALIZA DUPA CE IN PREALABIL
// S-A TESTAT CA SERIALA ESTE DISPONIBILA PENTRU A REALIZA ACEST LUCRU (METODA POOLING)
// IN CAZ CONTRAR SE VA ASTEPTA PANA CAND ACEASTA INTERFATA DEVINE DISPONIBILA (VEZI PG. 177)
static int uart1_putchar(char c)
{
  if(c == '\n') 
    uart1_putchar('\r');

  while ((UCSR1A & 0x20) == 0);   // UDRE, data register empty
    UDR1 = c;

  return 0;
}
		  

// PRELUAREA BYTE-LUI DE PE INTERFATA SERIALA SE VA REALIZA DUPA CE IN PREALABIL
// S-A TESTAT CA PE INTERFATA SERIALA ESTE DISPONIBIL BYTE-UL RECEPTIONAT
// IN CAZ CONTRAR SE VA ASTEPTA PANA CAND BYTE-UL RECEPTIONAT DEVINE DISPONIBIL (VEZI PG. 180)	
// PE PORTUL 'F' SE VA SETA CU VALOAREA BYTE-UL RECEPTIONAT
// FUNCTIA VA RETURNA BYTE-UL RECEPTIONAT 
static int uart1_getchar(void)
{
  int rcv;
  while ((UCSR1A & 0x80) == 0);
    rcv=UDR1;
  if(!iscntrl(rcv))
      UDR1=rcv;
  PORTF=rcv;
  return rcv;
}


// RUTINA DE DESERVIRE A INTRERUPEREI EXTERNE INT0
// INT0_vect - ADRESA ALOCATA VECTORULUI DE INTRERUPERE INT0
ISR(INT0_vect)
{
  if(DAC_VALUE > 0) 
     DAC_VALUE--;
}


// RUTINA DE DESERVIRE A INTRERUPEREI EXTERNE INT1
// INT0_vect - ADRESA ALOCATA VECTORULUI DE INTRERUPERE INT1
ISR(INT1_vect)
{
  if(DAC_VALUE < 1023) 
     DAC_VALUE++;
}

// INITIALIZAREA INTRERUPERILOR EXTERNE INT0 / INT1
void init_ext_int(void)
{
     // CONFIGURAREA INTRERUPERILOR EXTERNE INT0 / INT1
   EICRA = 0x0A; // INTRERUPERI GENERATE DE FRONTUL NEGATIV AL SEMNALULUI DE INTRARE  
   EICRB = 0x00; 
   EIMSK = 0x03; // ACTIVAREA INTRERUPERILOR INT0 / INT1

   DDRD  &= 0xFC; // CONFIGURAREA PINILOR PD0/INT0, PD1/INT1 CA PINI DE INTRARE
   PORTD |= 0x03; // ACTIVAREA REZISTENTELOR INTERNE DE PULL UP PENTRU PINII PD0/INT0, PD1/INT1
}

// INITIALIZARE BARGRAPH-LUI CU LED-URI
void init_bargraph(void)
{
   // INITIALIZAREA PORTULUI E, PORT DE IESIRE, TOTI PINII PORTULUI E SUNT SETATI IN 0
   DDRE   = 0xFF; 
   PORTE  = 0x00;
   // INITIALIZAREA PORTULUI F, PORT DE IESIRE, TOTI PINII PORTULUI F SUNT SETATI IN 0
   DDRF   = 0xFF;
   PORTF  = 0x00;
}

// INITIALIZAREA INTERFETEI SPI
void init_spi(void)
{
   DDRB  = 0x17;  // PINII PB0/SS, PB1/SCK, PB2/MOSI SUNT CONFIGURATI CA PINI DE IESIRE, PINUL PB3/MISO ESTE PIN DE INTRARE
   PORTB = 0x11;
   SPCR  = 0x53;  // ACTIVARE INTERFATA SPI, MODUL DE FUNCTIONARE: MASTER, FRECVENTA CEASULUI SCK=FOSC/128
   SPSR &= 0xFE;  // FRECVENTA CEASULUI INTERFETEI SPI, SETAT PE MODUL NORMAL DE FUNCTIONARE
}

void W_SPI_DAC(unsigned int V_DAC)
{
   unsigned int TMP_DAC=0x0000;
   char *pTMP_DAC=(char *)&TMP_DAC;
   unsigned char RCV_SPI[2];

   // FORMATARE DATE CONFORM FISEI TEHNICE TLC5615C, VEZI PG. 2,8 
   TMP_DAC  = V_DAC << 2;

   PORTE = pTMP_DAC[0] & 0xFC;  // SUNT PASTRATI TOTI BITI, MAI PUTIN ULTIMI DOI  (DE PE POZITIA LSB)
   PORTF = pTMP_DAC[1] & 0x0F;  // SUNT PASTRATI TOTI BITI, MAI PUTIN PRIMI PATRU (DE PE POZITIA MSB) 
         
   PORTB &= 0xFE;             // SELECTARE CHIP-LUI TLC5615
   SPDR = PORTF;              // TRANSMITEREA PE SPI A BYTE-ULUI CEL MAI SEMNIFICATIV 
   while(!(SPSR&(1<<SPIF)));  // ESTE ASTEPTATA INCHEIEREA TRANSMITERII CELOR 8 BITI DE DATE 
   RCV_SPI[1]=SPDR;           // PRELUAREA DE PE SPI A BYTE-ULUI CEL MAI SEMNIFICATIV  

   SPDR = PORTE;              // TRANSMITEREA PE SPI A BYTE-ULUI CEL MAI PUTIN SEMNIFICATIV
   while(!(SPSR&(1<<SPIF)));  // ESTE ASTEPTATA INCHEIEREA TRANSMITERII CELOR 8 BITI DE DATE
   RCV_SPI[0]=SPDR;           // PRELUAREA DE PE SPI A BYTE-ULUI CEL MAI PUTIN SEMNIFICATIV
   PORTB |= 0x01;             // DESELECTARE CHIP-LUI TLC5615 
}

unsigned int R_SPI_ADC(void)
{
   unsigned int TMP_ADC=0x0000;
   char *pTMP_ADC=(char *)&TMP_ADC;
         
   PORTB &= 0xEF;             // SELECTARE CHIP-LUI MAX1241
   SPDR = 0x00 ;              // TRANSMITEREA PE SPI A BYTE-ULUI CEL MAI SEMNIFICATIV 
   while(!(SPSR&(1<<SPIF)));  // ESTE ASTEPTATA INCHEIEREA TRANSMITERII CELOR 8 BITI DE DATE 
   pTMP_ADC[1]=SPDR;          // PRELUAREA DE PE SPI A BYTE-ULUI CEL MAI SEMNIFICATIV  

   SPDR = 0x00;               // TRANSMITEREA PE SPI A BYTE-ULUI CEL MAI PUTIN SEMNIFICATIV
   while(!(SPSR&(1<<SPIF)));  // ESTE ASTEPTATA INCHEIEREA TRANSMITERII CELOR 8 BITI DE DATE
   pTMP_ADC[0]=SPDR;          // PRELUAREA DE PE SPI A BYTE-ULUI CEL MAI PUTIN SEMNIFICATIV
   PORTB |= 0x10;             // DESELECTARE CHIP-LUI MAX1241

   // FORMATARE DATE CONFORM FISEI TEHNICE MAX1241, VEZI PG. 10, 13 
   TMP_ADC &= 0x7FF8;
   TMP_ADC >>=5;

  return TMP_ADC; 
}


// BONUS 1: IMPLEMENTAREA RUTINELOR DE CITIRE / SCRIERE 
// INTR-O SINGURA RUTINA DE TRANSFER PE SPI ( VARIANTA 1 )
unsigned int RW_SPI_DAC_ADC(unsigned int V_DAC)
{
  unsigned int TMP_ADC=0x0000;
  return TMP_ADC;
}

// BONUS 2: IMPLEMENTAREA RUTINELOR DE CITIRE / SCRIERE 
// INTR-O SINGURA RUTINA DE TRANSFER PE SPI ( VARIANTA 2 )
void RW_SPI_DAC_ADC2(unsigned int * V_DAC_ADC)
{
  unsigned int TMP_DAC_ADC = (unsigned int)*V_DAC_ADC;
  TMP_DAC_ADC++;
  (*V_DAC_ADC) = TMP_DAC_ADC;
}

int main(void)
 { 
   unsigned char UpDn = 0;
   unsigned int  TIME_STAMP = 0;
   unsigned int  ADC_VALUE = 0;
   unsigned int  DAC_ADC_VALUE = 0;
   float fADC_VALUE = 0.0;
   float fDAC_VALUE = 0.0;

   // DEZACTIVAREA TUTUROR INTRERUPERILOR PENTRU PROGRAMAREA INTERFETELOR 
   // ( ARE ROLUL DE A PREVINE PROGRAMAREA DEFECTUOASA SAU PARTIALA A MODULELOR / INTERFETELOR )
   // SE REALIZEAZA PRIN SETAREA IN 0 A BITULUI 7 IN CADRUL REGISTRULUI SREG 
   // A BITUL 7 DIN SREG ESTE RESPONSABIL CU ACTIVAREA / DEZACTIVAREA GLOBALA A INTRERUPERILOR
   cli();

   // INITIALIZAREA INTRERUPERILOR EXTERNE PD0/INT0, PD1/INT1 PENTRU BUTOANELE "UP / DOWN" 
   init_ext_int();

   // INITIALIZAREA PORTURILOR PORTE / PORTF PENTRU COMANDA BARGRAPH-LUI
   init_bargraph();

   // INITIALIZAREA INTERFETEI SERIALE SINCRONE SPI
   init_spi();

   // INITIALIZAREA INTERFETEI SERIALE ASINCRONE USART1
   uart1_init();

   // ASIGNAREA PRIN REFERINTA A DESCRIPTORUL ATASAT LA FLUXURILE STANDARD DE COMUNICATIE
   // 
   // ACCESAREA FLUXURILOR DE IESIRE  STANDARD ( STDOUT ) SAU EROARE  STANDARD ( STDERR )
   // VA DETRMINA APELAREA RUTINEI 'uart1_putchar' (DE EX. putchar(), puts(), printf())
   //
   // ACCESAREA FLUXULUI DE INTRARE  STANDARD ( STDIN )
   // VA DETRMINA APELAREA RUTINEI 'uart1_getchar' (DE EX. getchar(), gets(), scanf())
   stdout = stdin = stderr = &strm_uart1;

   // ACTIVAREA TUTUROR INTRERUPERILOR (SETAREA IN 1 IN CADRUL REGISTRULUI SREG 
   // A BITULUI RESPONSABIL CU ACTIVAREA / DEZACTIVAREA GLOBALA A INTRERUPERILOR 
   sei();

   printf("\nCOMUNICATIA SERIALA SINCRONA VIA SPI:");

   while(1)
    { 

     // DACA AMBELE BUTOANE SUNT TINUTE APASAT 
     // CONVERTORULUI DAC II SUNT TRANSMISE AUTOMAT VALORI CUPRINSE INTRE [0..1023..0..]
     // FORMA SEMNALULUI GENERAT LA IESIREA CONVERTORULUI DAC ESTE TRIUNGHIULARA 
     if( !(PIND & 0x03) )
       {
        if(UpDn == 0) {
          if( DAC_VALUE < 1023 ) 
			  DAC_VALUE++;
          else
              UpDn = 1;
        } else {
          if( DAC_VALUE > 0 ) 
		      DAC_VALUE--;
          else
              UpDn = 0;
        }
       }

      // APELUL RUTINEI PENTRU TRANSMITEREA DE VALORI CARE DAC, PE INTERFATA SPI
      W_SPI_DAC(DAC_VALUE);
      _delay_ms(10);
      
      // APELUL RUTINEI PENTRU CITIREA VALORILOR FURNIZATE DE ADC, PE INTERFATA SPI
      ADC_VALUE=R_SPI_ADC();
     
      RW_SPI_DAC_ADC2(&DAC_ADC_VALUE);

      // CONVERSIA VALORILOR DIGITALE LA VALORI ECHIVALENTE DE TENSIUNE
      fADC_VALUE = 4.096 * (float)ADC_VALUE / 1024.0;       // VREF_ADC * [0..1023] / 1024     - VEZI FOAIA DE CATALOG PENTRU MAX1241
      fDAC_VALUE = 2.0 * 2.048* (float)DAC_VALUE / 1024.0;  // 2 * VREF_DAC * [0..1023] / 1024 - VEZI FOAIA DE CATALOG PENTRU TLC5615

      // AFISAREA MARIMILOR PRELUCRATE
      printf("\n[%06i] DAC: %04X (%1.3fV) , ADC: %04X (%1.3fV)", TIME_STAMP, DAC_VALUE, fDAC_VALUE, ADC_VALUE, fADC_VALUE);
      
      // CONTOR OPERATIE CURENTA 
      TIME_STAMP++;
      
      _delay_ms(500);
    }
 } 